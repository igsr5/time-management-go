name: Build and Push

on:
  push:
    # branches:
    #   - master

jobs:
  build-and-push:

    runs-on: ubuntu-18.04
    timeout-minutes: 300

    steps:
      - uses: actions/checkout@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
          ECR_REPOSITORY_TAG: ${{ secrets.AWS_ECR_REPO_TAG }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_REPOSITORY_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$ECR_REPOSITORY_TAG"
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECS_CONTAINER_NAME: ${{ secrets.AWS_ECS_CONTAINER_NAME }}
        with:
          task-definition: .github/workflows/task-definition.json
          container-name: 
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        env:
          ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER
          wait-for-service-stability: true
